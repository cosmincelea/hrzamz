<?php

/**
 * AbstractDefaultApi
 *
 * PHP version 7.1
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Horze Amazon Pay REST API
 *
 * A Restful API that works as a gateaway for Amazon PAY
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Exception;

/**
 * AbstractDefaultApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractDefaultApi
{

    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface|null $container Slim app container instance
     */
    public function __construct(ContainerInterface $container = null)
    {
        $this->container = $container;
    }


    /**
     * GET customerGet
     * Notes: Gets customers data
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function customerGet(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $apiKey = $request->hasHeader('ApiKey') ? $headers['ApiKey'] : null;
        $amazonCheckoutSessionId = $args['amazonCheckoutSessionId'];
        $message = "How about implementing customerGet as a GET method in OpenAPIServer\Api\DefaultApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * POST orderAuthorizePost
     * Notes: Creates and authorizes an order
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function orderAuthorizePost(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $apiKey = $request->hasHeader('ApiKey') ? $headers['ApiKey'] : null;
        $amazonCheckoutSessionId = $args['amazonCheckoutSessionId'];
        $body = $request->getParsedBody();
        $message = "How about implementing orderAuthorizePost as a POST method in OpenAPIServer\Api\DefaultApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * GET orderCaptureGet
     * Notes: Gets the capture info
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function orderCaptureGet(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $apiKey = $request->hasHeader('ApiKey') ? $headers['ApiKey'] : null;
        $chargeId = $args['chargeId'];
        $message = "How about implementing orderCaptureGet as a GET method in OpenAPIServer\Api\DefaultApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * POST orderCapturePost
     * Notes: Captures an order
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function orderCapturePost(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $apiKey = $request->hasHeader('ApiKey') ? $headers['ApiKey'] : null;
        $chargeId = $args['chargeId'];
        $body = $request->getParsedBody();
        $message = "How about implementing orderCapturePost as a POST method in OpenAPIServer\Api\DefaultApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * GET orderRefundGet
     * Notes: Gets the refund info
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function orderRefundGet(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $apiKey = $request->hasHeader('ApiKey') ? $headers['ApiKey'] : null;
        $refundId = $args['refundId'];
        $message = "How about implementing orderRefundGet as a GET method in OpenAPIServer\Api\DefaultApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * POST orderRefundPost
     * Notes: Refunds an order
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function orderRefundPost(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $headers = $request->getHeaders();
        $apiKey = $request->hasHeader('ApiKey') ? $headers['ApiKey'] : null;
        $amazonCheckoutSessionId = $args['amazonCheckoutSessionId'];
        $body = $request->getParsedBody();
        $message = "How about implementing orderRefundPost as a POST method in OpenAPIServer\Api\DefaultApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }

    /**
     * POST sessionNewPost
     * Notes: Creates a new customer session
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function sessionNewPost(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $checkoutReviewReturnUrl = $args['checkoutReviewReturnUrl'];
        $checkoutResultReturnUrl = $args['checkoutResultReturnUrl'];
        $message = "How about implementing sessionNewPost as a POST method in OpenAPIServer\Api\DefaultApi class?";
        throw new Exception($message);

        $response->getBody()->write($message);
        return $response->withStatus(501);
    }
}
